import os
import json
import time
from dotenv import load_dotenv
from typing import List, Dict, Any
from google import genai
from google.genai import types

load_dotenv()

open_app_decl = {
    "name": "open_app",
    "description": "Searches for and opens an application on the current device via spotlight search.",
    "parameters": {
        "type": "object",
        "properties": {
            "app_name": {
                "type": "string",
                "description": "The name of the app to open.",
            },
            "continue": {
                "type": "boolean",
                "description": "Set to true if you feel there is another step needed to complete this process, otherwise set to false."
            },
            "next_steps": {
                "type": "string",
                "description": "Provide the remaining steps in accomplishing the task. Do this by continuing the sentence: 'Then function [function_name] was called with args [function_args], so now...'"
            },
        },
        "required": ["app_name", "continue", "next_steps"]
    },
}

write_text_decl = {
    "name": "write_text",
    "description": f"Writes text to the currently selected text box and optionally hits enter afterwards.",
    "parameters": {
        "type": "object",
        "properties": {
            "text": {
                "type": "string",
                "description": "The text to write to the selected text box.",
            },
            "enter": {
                "type": "boolean",
                "description": "Whether to hit enter after writing the text.",
            },
            "continue": {
                "type": "boolean",
                "description": "Set to true if you feel there is another step needed to complete this process, otherwise set to false."
            },
            "next_steps": {
                "type": "string",
                "description": "Provide the remaining steps in accomplishing the task. Do this by continuing the sentence: 'Then function [function_name] was called with args [function_args], so now...'"
            },
        },
        "required": ["text", "enter", "continue", "next_steps"],
    },
}

function_declarations = [open_app_decl, write_text_decl]

class LLM:
    def __init__(self):
        api_key = os.environ.get("GEMINI_API_KEY")
        if not api_key:
            raise RuntimeError("Set GEMINI_API_KEY in your environment.")
        self.client = genai.Client(api_key=api_key)
        self.config = types.GenerateContentConfig(
            tools=[types.Tool(function_declarations=function_declarations)],
            tool_config=types.ToolConfig(
                function_calling_config=types.FunctionCallingConfig(
                    mode="ANY", # ensures function is called 100% of the time
                ),
            ),
        )

    def get_function_call(self, objective: str) -> Dict[str, Any]:
        """
        Returns a function call generated by the LLM in order to accomplish the user's request.
        """
        start_time = time.time()
        response = self.client.models.generate_content(
            model="gemini-2.5-flash",
            contents=objective,
            config=self.config,
        )
        elapsed = time.time() - start_time
        print(f"[DEBUG] Gemini API call took {elapsed:.2f} seconds.")
        
        part = response.candidates[0].content.parts[0]
        if hasattr(part, "function_call"):
            fn = part.function_call.to_json_dict()
            fn["user_request"] = objective
            return fn
        else:
            print("Error - Response part does not contain function call")
            return {}

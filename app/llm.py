import os
import json
import time
from dotenv import load_dotenv
from typing import List, Dict, Any
from google import genai
from google.genai import types

load_dotenv()

continue_prompt = "If you feel there is another step needed to complete this process, populate the 'continue' parameter. Otherwise set its should_continue value to false."
context_prompt = "If you generate another function call, always set the 'context' parameter to an updated objective that incorporates the outcome of the last function call."

open_app_decl = types.FunctionDeclaration(
    name="open_app",
    description=f"Searches for and opens an application on the current device via spotlight search. {continue_prompt} {context_prompt}",
    parameters={
        "type": "object",
        "properties": {
            "app_name": {"type": "string"},
            "continue": {"type": "boolean"},
            "context": {"type": "string"},
        },
        "required": ["app_name", "continue", "context"],
    },
)

class LLM:
    def __init__(self):
        api_key = os.environ.get("GEMINI_API_KEY")
        if not api_key:
            raise RuntimeError("Set GEMINI_API_KEY in your environment.")
        self.client = genai.Client(api_key=api_key)
        self.config = types.GenerateContentConfig(
            tools=[types.Tool(function_declarations=[open_app_decl])],
            tool_config=types.ToolConfig(
                function_calling_config=types.FunctionCallingConfig(
                    mode="ANY", # ensures function is called 100% of the time
                ),
            ),
        )

    def get_function_call(self, objective: str) -> Dict[str, Any]:
        """
        Returns a function call generated by the LLM in order to accomplish the user's request.
        """
        prompt = f"""
        You are interacting with the user interface of a Windows laptop.
        Your current objective is: "{objective}".
        """

        start_time = time.time()
        response = self.client.models.generate_content(
            model="gemini-2.5-flash",
            contents=prompt,
            config=self.config,
        )
        elapsed = time.time() - start_time
        print(f"[DEBUG] Gemini API call took {elapsed:.2f} seconds.")
        
        part = response.candidates[0].content.parts[0]
        if hasattr(part, "function_call"):
            fn = part.function_call.to_json_dict()
            fn["user_request"] = objective
            print("fn dict:\n\n" + json.dumps(fn, indent=4))
            return fn
        else:
            print("Error - Response part does not contain function call")
            return {}

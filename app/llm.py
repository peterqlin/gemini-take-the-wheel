import os
import json
import time
from dotenv import load_dotenv
from typing import List, Dict, Any
from google import genai
from google.genai import types

load_dotenv()

open_app_decl = types.FunctionDeclaration(
    name="open_app",
    description="Searches for and opens an application on the current device via spotlight search.",
    parameters={
        "type": "object",
        "properties": {
            "app_name": {"type": "string"},
        },
        "required": ["app_name"],
    },
)

class LLM:
    def __init__(self):
        api_key = os.environ.get("GEMINI_API_KEY")
        if not api_key:
            raise RuntimeError("Set GEMINI_API_KEY in your environment.")
        self.client = genai.Client(api_key=api_key)
        self.config = types.GenerateContentConfig(
            tools=[types.Tool(function_declarations=[open_app_decl])],
            tool_config=types.ToolConfig(
                function_calling_config=types.FunctionCallingConfig(
                    mode="ANY",
                ),
            ),
        )

    def get_instructions_for_objective(self, objective: str) -> Dict[str, Any]:
        """
        Returns a list of function calls generated by the LLM in order to accomplish the user's request.
        """
        prompt = f"""
        You are interacting with the user interface of a Windows laptop.
        Your current objective is: "{objective}".
        """

        start_time = time.time()
        response = self.client.models.generate_content(
            model="gemini-2.5-flash",
            contents=prompt,
            config=self.config,
        )
        elapsed = time.time() - start_time
        print(f"[DEBUG] Gemini API call took {elapsed:.2f} seconds.")
        
        part = response.candidates[0].content.parts[0]
        if hasattr(part, "function_call"):
            fn = part.function_call
            return {"steps": [fn]}
        else:
            print("Error - Response part does not contain function call")
            return {"steps": []}
